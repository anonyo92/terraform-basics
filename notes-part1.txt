------------------------------------------------------------------------------------------------
OUTPUT VALUES & ATTRIBUTES
------------------------------------------------------------------------------------------------
output "output-name" {
    value = "resource-type"."resource-name"."attribute"
}
    Outputs will be dumped on screen after apply. If no attribute is specified for a resource,
    its whole details will be dumped.
    If we need to concat strings including attributes use ${} like,
        "${aws_eip.lb.public_ip}/32"
    (Use [] for arrays?)
------------------------------------------------------------------------------------------------
INPUT VARIABLES
------------------------------------------------------------------------------------------------
[DECLARATION]
    variable "variable-name" {
        type = string
    }
    Data Types can be "string", "number", "bool", "list", "tuple", "set", "map", "object".
    "list", "tuple", "set", "map", "object" can also be used as type constructors to specify the element type
    such as list(object({field1 = val1}))
    It will be validated. Good practice to specify.
[ACCESS]
    Can be referred to as var.somevarname
[ASSIGNMENT]
    1. Default Values
        variable "variable-name" {
            default = "t2.micro"
        }
        It will be overriden by CLI input, File-input (or ENV vars?)
        If variable is declared with no default values and no other way to supply values,
            a value will be asked for on the Command Prompt during plan/apply.
    2. Command Line Input
        Use -var option, like -var="instancetype=t2.medium" with plan/apply.
    3. File Input
        Put the variable values in the file called "terraform.tfvars".
        If any other file-name is to be used (like "custom.tfvars"), use the -var-file option
        (like -var-file="custom.tfvars") with plan/apply.
    4. Environment Variables
        Has to be named like TF_VAR_<variable-name>
            like export TF_VAR_instancetype = "t2.medium" (Unix)
            or setx TF_VAR_instancetype = "t2.medium" (Windows)
[CUSTOM VALIDATION-RULES]
    We can add custom validation rules for a variable using the validation sub-block, like:
    variable "image_id" {
        type = "string"
        validation {
            condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == "ami-"
            error_message = "The image_id value must be a valid AMI id, starting with \"ami-\"."
        }
    }
------------------------------------------------------------------------------------------------
COUNT
------------------------------------------------------------------------------------------------
'count' parameter in any resource specifies the number of them to be created.
count.index refers to the index-th instance of that resource (0-based).
------------------------------------------------------------------------------------------------
CONDITIONAL EXPRESSIONS
------------------------------------------------------------------------------------------------
Use the ternary style: condition ? true-value : false-value
Eg: resource "aws_instance" "dev" { count = var.isdev == true ? 1 : 0 }
    resource "aws_instance" "prod" { count = var.isdev == false ? 1 : 0 }